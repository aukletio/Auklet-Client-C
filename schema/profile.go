package schema

import (
	"encoding/json"
	"time"
)

// profile represents profile data as expected by broker consumers.
type profile struct {
	metadata
	// Tree represents the profile tree data generated by an agent.
	Tree node `json:"tree"`
}

type node struct {
	Fn       int64  `json:"functionAddress"`
	Cs       int64  `json:"callSiteAddress,omitempty"`
	Ncalls   int    `json:"nCalls,omitempty"`
	Nsamples int    `json:"nSamples,omitempty"`
	Callees  []node `json:"callees,omitempty"`
}

func nowMilli() int64 {
	return time.Now().UnixNano() / 1000000 // milliseconds
}

// newProfile creates a Profile for app out of raw message data.
func newProfile(data []byte, app App) profile {
	var p profile
	err := json.Unmarshal(data, &p)
	if err != nil {
		p.Error = err.Error()
	}
	p.metadata = newMetadata(app)
	return p
}
