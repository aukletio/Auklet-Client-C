package schema

import (
	"encoding/json"
	"time"

	"github.com/satori/go.uuid"

	"github.com/ESG-USA/Auklet-Client-C/config"
	"github.com/ESG-USA/Auklet-Client-C/device"
	"github.com/ESG-USA/Auklet-Client-C/version"
)

type metadata struct {
	Version      string `json:"clientVersion"`
	AgentVersion string `json:"agentVersion"`
	AppID        string `json:"application"`
	CheckSum     string `json:"checksum"`  // SHA512/224 hash of the executable
	IP           string `json:"publicIP"`  // current public IP address
	UUID         string `json:"id"`        // identifier for this message
	Time         int64  `json:"timestamp"` // Unix milliseconds
	Error        string `json:"error,omitempty"`
}

// App is anything that can return a checksum and agent version.
type App interface {
	AgentVersion() string
	CheckSum() string
}

func newMetadata(app App) metadata {
	return metadata{
		Version:      version.Version,
		AgentVersion: app.AgentVersion(),
		AppID:        config.AppID(),
		CheckSum:     app.CheckSum(),
		IP:           device.CurrentIP(),
		UUID:         uuid.NewV4().String(),
		Time:         nowMilli(),
	}
}

// appLog represents custom log data as expected by broker consumers.
type appLog struct {
	metadata
	// Message is the log message sent by the application.
	Message []byte         `json:"message"`
	MacHash string         `json:"macAddressHash"`
	Metrics device.Metrics `json:"systemMetrics"`
}

// newAppLog converts msg into a custom log message.
func newAppLog(msg []byte, app App) appLog {
	return appLog{
		metadata: newMetadata(app),
		MacHash:  device.MacHash,
		Metrics:  device.GetMetrics(),
		Message:  msg,
	}
}

// profile represents profile data as expected by broker consumers.
type profile struct {
	metadata
	// Tree represents the profile tree data generated by an agent.
	Tree node `json:"tree"`
}

type node struct {
	Fn       int64  `json:"functionAddress"`
	Cs       int64  `json:"callSiteAddress,omitempty"`
	Ncalls   int    `json:"nCalls,omitempty"`
	Nsamples int    `json:"nSamples,omitempty"`
	Callees  []node `json:"callees,omitempty"`
}

func nowMilli() int64 {
	return time.Now().UnixNano() / 1000000 // milliseconds
}

// newProfile creates a Profile for app out of raw message data.
func newProfile(data []byte, app App) profile {
	var p profile
	err := json.Unmarshal(data, &p)
	if err != nil {
		p.Error = err.Error()
	}
	p.metadata = newMetadata(app)
	return p
}

// errorSig represents the exit of an app in which an agent handled an "error
// signal" and produced a stacktrace.
type errorSig struct {
	metadata
	// Status is the exit status of the application.
	Status int `json:"exitStatus"`
	// Signal is an integer value provided by an agent. As an output, it is
	// encoded as a string.
	Signal string `json:"signal"`
	// Trace is a stacktrace provided by an agent.
	Trace   []frame        `json:"stackTrace"`
	MacHash string         `json:"macAddressHash"`
	Metrics device.Metrics `json:"systemMetrics"`
}

type frame struct {
	Fn int64 `json:"functionAddress"`
	Cs int64 `json:"callSiteAddress"`
}

// newErrorSig creates an ErrorSig for app out of raw message data.
func newErrorSig(data []byte, app App, exitStatus int) errorSig {
	var e errorSig
	err := json.Unmarshal(data, &e)
	if err != nil {
		e.Error = err.Error()
	}
	e.metadata = newMetadata(app)
	e.Status = exitStatus
	e.MacHash = device.MacHash
	e.Metrics = device.GetMetrics()
	return e
}

// exit represents the exit of an app in which an agent did not handle a
// signal. The app may or may not have been delivered a termination signal of
// some kind, but not one handled by an agent. See man 7 signal for details.
type exit struct {
	metadata
	// Status is the exit status of the application as accessible through
	// App.Wait.
	Status  int            `json:"exitStatus"`
	Signal  string         `json:"signal,omitempty"`
	MacHash string         `json:"macAddressHash"`
	Metrics device.Metrics `json:"systemMetrics"`
}

// newExit creates an exit for app.
func newExit(app App, signal string, exitStatus int) exit {
	return exit{
		metadata: newMetadata(app),
		Status:   exitStatus,
		Signal:   signal,
		MacHash:  device.MacHash,
		Metrics:  device.GetMetrics(),
	}
}
